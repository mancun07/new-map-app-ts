{"version":3,"sources":["components/Info.module.scss","components/Loader.module.scss","components/Marker.module.scss","components/Notification.module.scss","app/countrySlice.ts","components/Marker.tsx","app/actions.tsx","hooks/hooks.ts","components/Map.tsx","components/Header.tsx","components/Loader.tsx","components/Info.tsx","components/Notification.tsx","App.tsx","app/store.ts","serviceWorker.js","index.js","components/Header.module.scss"],"names":["module","exports","countrySlice","createSlice","name","initialState","items","infoIsShown","chosenCountry","filteredItems","menuIsShown","loading","error","reducers","addDataToRedux","state","action","payload","showInfo","hideInfo","setChosenCountry","clearChosenCountry","filterByQuantity","filter","el","population","filterByLanguage","langs","languages","Object","values","includes","toggleMenu","setLoading","setError","countryActions","actions","Marker","props","dispatch","useDispatch","clickHandler","fetchSingleData","a","fetch","response","ok","Error","json","data","message","getSingleData","className","classes","marker","onClick","style","color","padding","useAppDispatch","useAppSelector","useSelector","Map","country","updatedItems","map","id","Math","random","updatedFilteredItems","itemsToMap","lat","latlng","lng","common","flag","flags","svg","filteredItemsToMap","height","width","bootstrapURLKeys","key","defaultCenter","defaultZoom","Header","uniqueLanguages","arr","newArr","undefined","push","onlyUnique","slice","sort","b","language","header","hamb__button","navbar","navbar__isShown","navbar__item","htmlFor","onChange","e","value","target","Loader","Info","convertedNumbersPopulation","sideTraffic","numberWithSpaces","number","toString","replace","area","car","side","motion","div","initial","y","animate","info","title","src","alt","main","capital","i","length","currencies","symbol","Notification","notification","App","useEffect","fetchData","setTimeout","store","configureStore","reducer","countryReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c14eb838.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"Info_info__OiQEZ\",\"title\":\"Info_title__2xD5L\",\"main\":\"Info_main__3rdEO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"Loader_loading__qCoMm\",\"lds-dual-ring\":\"Loader_lds-dual-ring__1WNOc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"marker\":\"Marker_marker__3oxfD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notification\":\"Notification_notification__36URB\"};","import { createSlice } from '@reduxjs/toolkit'\r\nimport type { PayloadAction } from '@reduxjs/toolkit'\r\n\r\n// Define a type of slice\r\n\r\ninterface CountryState {\r\n    items: [],\r\n    infoIsShown: boolean,\r\n    chosenCountry: any,\r\n    filteredItems: any,\r\n    menuIsShown: boolean,\r\n    loading: boolean,\r\n    error: any\r\n}\r\n\r\nconst initialState:CountryState = {\r\n    items: [],\r\n    infoIsShown: false,\r\n    chosenCountry: null,\r\n    filteredItems: null,\r\n    menuIsShown: false,\r\n    loading: false,\r\n    error: null\r\n}\r\n\r\nexport const countrySlice = createSlice({\r\n    name: 'country',\r\n    initialState,\r\n    reducers: {\r\n        addDataToRedux: (state, action:PayloadAction<[]>) => {\r\n            state.items = action.payload\r\n        },\r\n        showInfo: (state) => {\r\n            state.infoIsShown = true\r\n        },\r\n        hideInfo: (state) => {\r\n            state.infoIsShown = false\r\n        },\r\n        setChosenCountry: (state, action:PayloadAction<[]>) => {\r\n            state.chosenCountry = action.payload\r\n        },\r\n        clearChosenCountry: (state) => {\r\n            state.chosenCountry = null\r\n        },\r\n        filterByQuantity: (state, action:PayloadAction<number>) => {\r\n            state.filteredItems = state.items.filter((el:any) => {\r\n                return el.population > action.payload\r\n            })\r\n        },\r\n        filterByLanguage: (state, action:PayloadAction<string>) => {\r\n            state.filteredItems = state.items && state.items.filter((el:any) => {\r\n                let langs = el.languages && Object.values(el.languages)\r\n         \r\n                return langs && langs.includes(action.payload)\r\n            })\r\n        },\r\n        toggleMenu: (state) => {\r\n            state.menuIsShown = !state.menuIsShown\r\n        },\r\n        setLoading: (state, action:PayloadAction<boolean>) => {\r\n            state.loading = action.payload\r\n        },\r\n        setError: (state, action:PayloadAction<string|null>) => {\r\n            state.error = action.payload\r\n        }\r\n    }\r\n\r\n})\r\n\r\n\r\nexport const countryActions = countrySlice.actions;\r\n\r\nexport default countrySlice.reducer;\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport {useDispatch} from 'react-redux';\r\nimport { countryActions } from '../app/countrySlice';\r\nimport { getSingleData } from '../app/actions';\r\nimport classes from './Marker.module.scss'\r\n\r\nconst Marker:React.FC<{key:number, lat: number, lng: number, name:string, flag: string}> = (props) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const clickHandler = (name:string) => {\r\n        dispatch(countryActions.showInfo())\r\n        dispatch(getSingleData(name))\r\n    }\r\n\r\n    return (\r\n        <div className={classes.marker} onClick={() => clickHandler(props.name)}>\r\n            <i className=\"fas fa-map-pin\" style={{color: 'yellow', padding: '10px'}}></i>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Marker\r\n","import {countryActions} from './countrySlice';\r\n\r\nexport const getData = () => {\r\n    return async (dispatch:any) => {\r\n\r\n        const fetchData = async () => {\r\n            dispatch(countryActions.setLoading(true))\r\n            const response = await fetch(`https://restcountries.com/v3.1/all`);\r\n            if (!response.ok) {\r\n                throw new Error('Извините, возникла ошибка. Попробуйте перезагрузить приложение.')\r\n            }\r\n            const data = await response.json();\r\n            dispatch(countryActions.addDataToRedux(data))\r\n            \r\n        }\r\n\r\n        try {\r\n            await fetchData();\r\n        } catch (err:any) {\r\n            dispatch(countryActions.setError(err.message))\r\n            setTimeout(() => {\r\n            dispatch(countryActions.setError(null))\r\n            }, 5000)\r\n        }\r\n        dispatch(countryActions.setLoading(false))\r\n\r\n    }\r\n}\r\n\r\nexport const getSingleData = (name:string) => {\r\n    return async (dispatch:any) => {\r\n\r\n        const fetchSingleData = async () => {\r\n            const response = await fetch(`https://restcountries.com/v3.1/name/${name}`);\r\n            if (!response.ok) {\r\n                throw new Error('Извините, возникла ошибка. Попробуйте перезагрузить приложение.')\r\n            }\r\n            const data = await response.json();\r\n            dispatch(countryActions.setChosenCountry(data))\r\n        }\r\n\r\n        try {\r\n            await fetchSingleData()\r\n        } catch (err: any) {\r\n            dispatch(countryActions.setError(err.message))\r\n        }\r\n    }\r\n}","import { useDispatch, useSelector } from 'react-redux'\r\nimport type { TypedUseSelectorHook } from 'react-redux'\r\nimport type { RootState, AppDispatch } from '../app/store'\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch: () => AppDispatch = useDispatch\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import React from 'react'\r\nimport GoogleMapReact from 'google-map-react';\r\nimport Marker from './Marker';\r\nimport { useSelector } from 'react-redux';\r\nimport { useAppSelector, useAppDispatch } from '../hooks/hooks'\r\n\r\nconst Map:React.FC = () => {\r\n\r\n  const items = useAppSelector(state => state.country.items)\r\n  const filteredItems = useAppSelector(state => state.country.filteredItems)\r\n\r\n  const updatedItems = items.map((el:any) => {\r\n    return {\r\n      ...el,\r\n      id: Math.random()\r\n    }\r\n  })\r\n\r\n  const updatedFilteredItems = filteredItems && filteredItems.map((el:any) => {\r\n    return {\r\n      ...el,\r\n      id: Math.random()\r\n    }\r\n  })\r\n\r\n  const itemsToMap = updatedItems.map((el:any) => {\r\n    return <Marker key={el.id}\r\n    lat={el.latlng[0]}\r\n    lng={el.latlng[1]}\r\n    name={el.name.common}\r\n    flag={el.flags.svg}\r\n  />\r\n})\r\n\r\n  const filteredItemsToMap = filteredItems && updatedFilteredItems.map((el:any) => {\r\n    return <Marker key={el.id}\r\n    lat={el.latlng[0]}\r\n    lng={el.latlng[1]}\r\n    name={el.name.common}\r\n    flag={el.flags.svg}\r\n  />\r\n})\r\n\r\n\r\n    return (\r\n      // Important! Always set the container height explicitly\r\n      <div style={{ height: '100vh', width: '100%'}}>\r\n      <GoogleMapReact\r\n        bootstrapURLKeys={{ key: '' }}\r\n        defaultCenter={{lat: 59.95, lng: 30.33}}\r\n        defaultZoom={3}\r\n      >\r\n        {!filteredItems ? itemsToMap : filteredItemsToMap}\r\n\r\n      </GoogleMapReact>\r\n    </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Map\r\n","import React, {useEffect} from 'react'\r\nimport { countryActions } from '../app/countrySlice'\r\nimport classes from './Header.module.scss'\r\nimport { useAppSelector, useAppDispatch } from '../hooks/hooks'\r\n\r\nconst Header:React.FC = () => {\r\n\r\n    const items = useAppSelector((state) => state.country.items)\r\n    const menuIsShown = useAppSelector((state)=> state.country.menuIsShown)\r\n    const dispatch = useAppDispatch();\r\n    \r\n    // useEffect(() => {\r\n    //     if (window.innerWidth > 500) {\r\n    //         dispatch(countryActions.toggleMenu())\r\n    //     }\r\n    // }, [dispatch, window.innerWidth])\r\n\r\n\r\n\r\n    const onChangeHandler = (value:number) => {\r\n        dispatch(countryActions.filterByQuantity(value))\r\n        dispatch(countryActions.toggleMenu())\r\n    }\r\n\r\n    const onChangeHandler2 = (value:string) => {\r\n        dispatch(countryActions.filterByLanguage(value))\r\n        dispatch(countryActions.toggleMenu())\r\n    }\r\n\r\n    const mobileMenuHandler = () => {\r\n        dispatch(countryActions.toggleMenu())\r\n    }\r\n\r\n    // получаем массив, состоящий только из языков, чтобы вывести в select языки\r\n    const onlyLanguages = items && items.map(el => {\r\n        const {languages} = el;\r\n        let arr = languages && Object.values(languages).slice(0,1)\r\n        let mainLanguage = arr && arr[0]\r\n        return mainLanguage\r\n    })\r\n\r\n\r\n    const onlyUnique = (arr: string[]) => {\r\n        let newArr:string[] =  [];\r\n        for (const el of arr) {\r\n            if (!newArr.includes(el) && el !== undefined) {\r\n                newArr.push(el)\r\n            }\r\n        }\r\n        return newArr\r\n    }\r\n\r\n    // оставляем только уникальные языки в массиве\r\n    const uniqueLanguages = onlyUnique(onlyLanguages)\r\n    .sort((a, b) => {\r\n        return a > b ? 1 : -1\r\n    })\r\n    .map(el => {\r\n        return {\r\n            language: el,\r\n            id: Math.random()\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div className={classes.header}>\r\n            <h2>Узнай основные факты о стране (всего одним кликом!)</h2>\r\n            <div className={classes.hamb__button} onClick={mobileMenuHandler}></div>\r\n            <div className={`${classes.navbar} ${menuIsShown && classes.navbar__isShown}`}>\r\n                <div className={classes.navbar__item}>\r\n                    <label htmlFor=\"population\">Показать на карте страны с численностью населения:</label>\r\n                    <select name=\"population\" id=\"population\" onChange={(e => onChangeHandler(+(e.target.value)))}>\r\n                        <option value={0}>Все страны</option>\r\n                        <option value={10000000}>Более 10млн человек</option>\r\n                        <option value={30000000}>Более 30млн человек</option>\r\n                        <option value={50000000}>Более 50млн человек</option>\r\n                        <option value={70000000}>Более 70млн человек</option>\r\n                        <option value={100000000}>Более 100млн человек</option>\r\n                    </select>\r\n                </div>\r\n                <div className={classes.navbar__item}>\r\n                    <label htmlFor=\"language\">Показать на карте страны, в которых выбранный ниже язык, является официальным:</label>\r\n                    <select  name=\"language\" id=\"language\" onChange={e => onChangeHandler2(e.target.value)}>\r\n                        <option>Все языки</option>\r\n                    {uniqueLanguages && uniqueLanguages.map((el) => {\r\n                        return <option key={el.id} value={el.language}>{el.language}</option>\r\n                    })}\r\n                    </select>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport classes from './Loader.module.scss'\r\n\r\nconst Loader:React.FC = () => {\r\n    return (\r\n        <div className={classes.loading}>\r\n            <div className={classes[`lds-dual-ring`]}> </div>\r\n            <h2>Подождите, идет загрузка...</h2>            \r\n           \r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Loader\r\n","import React, {Fragment} from 'react'\r\nimport { countryActions } from '../app/countrySlice'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { motion } from 'framer-motion'\r\nimport classes from './Info.module.scss'\r\nimport { useAppSelector, useAppDispatch } from '../hooks/hooks'\r\n\r\nconst Info:React.FC = () => {\r\n\r\n    const dispatch = useAppDispatch();\r\n    const chosenCountry = useAppSelector(state => state.country.chosenCountry)\r\n\r\n    const clickHandler = () => {\r\n        dispatch(countryActions.hideInfo())\r\n        dispatch(countryActions.clearChosenCountry())\r\n    }\r\n\r\n    const numberWithSpaces = (number:number) => {\r\n        return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\r\n    }\r\n\r\n    let convertedNumbersPopulation;\r\n    let sideTraffic; \r\n    let convertedTotalArea;\r\n\r\n    if (chosenCountry) {\r\n        convertedNumbersPopulation = numberWithSpaces(chosenCountry[0].population);\r\n        convertedTotalArea = numberWithSpaces(chosenCountry[0].area);\r\n        if (chosenCountry[0].car.side === 'right') {\r\n            sideTraffic = 'Правостороннее'\r\n        } else {\r\n            sideTraffic = 'Левостороннее'\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n        { chosenCountry && \r\n        <motion.div initial={{y: '-100vh'}} animate={{y: 0}} className={classes.info}>\r\n       <div className={classes.title}>\r\n           <div>{chosenCountry[0].name.common}</div> \r\n           <p>Данные на 2020г.</p>\r\n           <img src={chosenCountry[0].flags.svg} alt={'Flag'}/>\r\n        </div>\r\n       <div className={classes.main}>\r\n            <div>Столица: {chosenCountry[0].capital}</div>\r\n            <div>Население: {convertedNumbersPopulation} чел.</div>\r\n            {/* <div>Площадь: {(convertedTotalArea === '-1') ? 'Нет данных'  : (convertedTotalArea + ' км2')}</div> */}\r\n            <div>Движение: {sideTraffic}</div>\r\n            <div>Официальные языки в стране: {Object.values(chosenCountry[0].languages)\r\n            .map((el:any,i, arr) => { \r\n                return i !== arr.length - 1 ? <span key={i}>{el}{', '}</span> : <span key={i}>{el}</span>\r\n            })}</div>\r\n            <div>Валюта: {Object.values(chosenCountry[0].currencies).map((el:any, i) => {\r\n                return <span key={i}>{el.name}({el.symbol})</span>\r\n            })}</div>\r\n       </div>\r\n            <button onClick={clickHandler}>Скрыть</button>\r\n        </motion.div>  }\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Info\r\n","import React from 'react'\r\nimport classes from './Notification.module.scss'\r\nimport { motion } from 'framer-motion'\r\n\r\nconst Notification:React.FC<{error:any}> = (props) => {\r\n\r\n    return (\r\n        <motion.div initial={{y: '-100vh'}} animate={{y: 0}} className={classes.notification}>\r\n            {props.error}\r\n        </motion.div>\r\n    )\r\n}\r\n\r\nexport default Notification\r\n","import React, {useEffect} from 'react';\r\nimport Map from './components/Map';\r\nimport Header from './components/Header';\r\nimport Loader from './components/Loader';\r\nimport Info from './components/Info';\r\nimport {getData} from './app/actions'\r\nimport Notification from './components/Notification';\r\nimport { useAppSelector, useAppDispatch } from './hooks/hooks'\r\n\r\nfunction App() {\r\n    const infoIsShown = useAppSelector(state => state.country.infoIsShown)\r\n    const loading = useAppSelector(state => state.country.loading)\r\n    const error = useAppSelector(state => state.country.error)\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n      dispatch(getData());\r\n  }, [dispatch])\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Header/>\r\n      {loading && <Loader />}\r\n      <Map/>\r\n      {infoIsShown && <Info/>}\r\n      {error && <Notification error={error} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport countryReducer from './countrySlice'\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n      country: countryReducer\r\n  },\r\n})\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1GWNh\",\"hamb__button\":\"Header_hamb__button__2lDne\",\"navbar\":\"Header_navbar__38QNS\",\"navbar__item\":\"Header_navbar__item__1v8Us\",\"navbar__isShown\":\"Header_navbar__isShown__3GsOJ\"};"],"sourceRoot":""}